{% extends "layouts/main.njk" %}

{% block slides %}
<section>
    <h1>CMPUT 404</h1>
    <h3>Web Applications and Architecture</h3>
    <h2>Progressive Web Applications</h2>
    <p>
        <small>Created by <br>
                Hazel Campbell (<a href="mailto:hazel.campbell@ualberta.ca">hazel.campbell@ualberta.ca</a>).<br> Copyright 2023.
        </small>
    </p>
</section>
<section>
    <h3>Progressive Web Apps</h3>
    <ul>
        <li>Run on multiple platforms and devices from one codebase</li>
        <ul>
                <li>Can run both as a website and a mobile app</li>
                <li>Can even run on some refrigerators</li>
        </ul>
        <li>Can perform tasks while main app is not running</li>
        <li>Modern examples include Uber, Spotify, Google Maps, and Pinterest</li>
    </ul>
</section>
<section>
    <h3>Progressive Web Apps</h3>
    <ul>
        <li>Work offline</li>
        <li>Manage caching
            <ul>
                <li>& pre-loading!</li>
            </ul>
        </li>
        <li>Notifications</li>
    </ul>
</section>
<section>
    <h3>PWA parts</h3>
    <ul>
        <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">ServiceWorkers API</a></li>
        <li>The "installer" script</li>
        <li>The ServiceWorker script</li>
    </ul>
</section>
<section>
    <h3>Installer script</h3>
    <ul>
        <li>Loaded by HTML (directly or indirectly) &lt;script> tag</li>
        <li>Should be in all the main pages of the app</li>
        <li>Uses the <code>navigator.serviceWorker</code> object, a <code>ServiceWorkerContainer</code></li>
        <li>Has access to the page and everything like a normal script</li>
    </ul>
</section>
<section>
    <h3>Installer script</h3>
    <ul>
        <li>First, check if serviceWorker is supported</li>
    </ul>
    <pre><code>{% filter prexample %}
        if ("serviceWorker" in navigator) {
            navigator.serviceWorker... // do something with the ServiceWorkerContainer API
        }
    {% endfilter %}</code></pre>
</section>
<section>
    <h3>ServiceWorker</h3>
    <ul>
        <li>Intended to improve performance of website/app
            <ul>
                <li>caching - different from HTTP cache</li>
                <li>Event based</li>
                <li>Works in the background- does not interrupt main app</li>
            </ul>
        </li>
        <li>Optional</li>
    </ul>
</section>
<section>
    <h3>ServiceWorker API</h3>
    <ul>
        <li>Basically everything returns promises</li>
        <li>async / await is your friend!</li>
    </ul>
    <pre><code>{% filter prexample %}
        const registerServiceWorker = async () => {
            if ("serviceWorker" in navigator) {
                await navigator.serviceWorker... // do something with the ServiceWorkerContainer API
            }
        }

        // just start the function and proceed with the rest of the script
        registerServiceWorker(); 
    {% endfilter %}</code></pre>
</section>
<section>
    <h3>ServiceWorker script</h3>
    <ul>
        <li>Loaded by the browser after being registered by the installer script</li>
        <li>Must be at the root of all the pages it's going to work with
            <ul>
                <li>It includes sub-folders and pages in the same folder</li>
                <li>Excludes other domains and other parent folders!</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>ServiceWorker script</h3>
    <ul>
        <li>Must be loaded over HTTP<b>S</b></li>
        <li>Cannot access the page, window, and most JS APIs
            <ul>
                <li>console.log messages will not show up in the tab!</li>
            </ul>
        </li>
        <li>Runs in a seperate thread</li>
    </ul>
</section>
<section>
    <h3>ServiceWorker script</h3>
    <ul>
        <li>Mainly accesses the API through the ServiceWorkerGlobalScope</li>
        <li>Difficult to debug...</li>
        <li>Can communicate to pages via<br>
            <pre><code>{% filter prexample %}
                const sendToAllTabs async (data) => {
                   (await self.clients.matchAll()).map((client) => {
                        // data is some structured-cloneable object
                        await client.postMessage(data);
                    });
                }
            {% endfilter %}</code></pre>
        </li>
    </ul>
</section>
<section>
    <h3>Communication</h3>
    <ul>
        <li>Pages can receive messages from ServiceWorker:
            <pre><code>{% filter prexample %}
                if ("serviceWorker" in navigator) {
                    navigator.serviceWorker.addEventListener("message", (event) => {
                        if ("data" in event) {
                            // data.event is the structured-cloneable message from the serviceworker
                        }
                    })
                    navigator.serviceWorker.startMessages();
                }
            {% endfilter %}</code></pre>
        </li>
    </ul>
</section>
<section>
    <h3>Structured Cloneable</h3>
    <ul>
        <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm">MDN Documentation</a></li>
        <li>Objects that can be easily cloned
            <ul>
                <li>Similar to Python <code>copy.deepcopy</code></li>
            </ul>
        </li>
        <li>Used for thread-to-thread Communication
            <ul>
                <li>Web Workers</li>
                <li>Shared Workers</li>
                <li>Service Workers</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Structured Cloneable</h3>
    <ul>
        <li>Can have:
            <ul class="twoColumn">
                <li>Plain Objects</li>
                <li>String</li>
                <li>Number</li>
                <li>Array</li>
                <li>ArrayBuffer</li>
                <li>Boolean</li>
                <li>DataView</li>
                <li>Date</li>
                <li>Error (kinda)</li>
                <li>Map</li>
                <li>Number</li>
                <li>null</li>
                <li>undefined</li>
                <li>BigInt</li>
                <li>RegExp (kinda)</li>
                <li>Set</li>
                <li>String</li>
                <li>TypedArray</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Structured Cloneable</h3>
    <ul>
        <li>Can't have:
            <ul>
                <li>Functions</li>
                <li>DOM Nodes</li>
                <li>Complicated objects (e.g. made by a class)</li>
                <li>Event</li>
                <li>...</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Events + ServiceWorker Code</h3>
    <ul>
        <li>Browser considers the event finished when all the handlers exit unless...</li>
        <li>The event is an <a href="https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent">ExtendableEvent</a></li>
        <li>Then we can use <code>event.waitUntil(somePromise)</code></li>
        <li>This prevents the thread from being killed by the browser</li>
    </ul>
</section>
<section>
    <h3>ServiceWorker Script</h3>
    <ul>
        <li>Can (and will!) be killed by the browser whenever it feels like it</li>
        <li>Use <code>event.waitUntil()</code> to ask browser for more time</li>
        <li>They are not always running!</li>
    </ul>
</section>
<section>
    <h3>ServiceWorker Lifecycle</h3>
    <ul>
        <li>Registered by page JS</li>
        <li>Browser goes and gets the ServiceWorker JS</li>
        <li>Browser installs the ServiceWorker JS</li>
        <li>If there was a previous ServiceWorker JS with the same URL, it waits for the tabs to close</li>
        <li>Browser removes the old version and activates the new version</li>
        <li>New tabs use the new version of the service worker</li>
    </ul>
</section>
<section>
    <h3>ServiceWorker Lifecycle</h3>
    <ul>
        <li>Default: Allow all tabs to close before new version of the SW (and the App)</li>
        <li>Optionally: Service worker can take over ASAP
            <ul>
                <li><code>self.skipWaiting()</code> in <code>install</code> event handler</li>
                <li><code>clients.claim()</code> in <code>activate</code> event handler</li>
                <li>Tell clients (tabs) there's a new version
                    <ul>
                        <li>Just reload</li>
                        <li>Popup for the user</li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>ServiceWorker Script</h3>
    <ul>
        <li>Only runs when first registered and some events:
            <ul>
                <li><code>install</code> - service worker is first installed</li>
                <li><code>activate</code> - service worker becomes the active service worker version</li>
                <li><code>message</code> - a tab (client) sent the serviceworker a message</li>
                <li><code>fetch</code> - page makes a fetch request</li>
                <li><code>push...</code> - Push API (Notifications)</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Making it Offline</h3>
    <ul>
        <li>After the service worker is activated it can intercept all requests made by the app</li>
        <li>HTML, JS, CSS, fetch(), everything</li>
        <li><code>self.addEventListener("fetch", (event) => { ... });</code></li>
        <li><code>event.respondWith(promise for response)</code> to take over handling the request</li>
        <li>return without calling <code>respondWith</code> to let the browser handle as normal</li>
    </ul>
</section>
<section>
    <h3>Making it Offline</h3>
    <ul>
        <li>Fetch handler
            <ul>
                <li>Examine <code>Request</code> and decide if it should be handled by SW</li>
                <li>Look for valid data in the cache</li>
                <li>Give a promise for the response if its in the cache</li>
                <li>If its not in the cache, use normal <code>fetch()</code> to supply result</li>
                <li>Optionally add result to cache</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Cache Management</h3>
    <ul>
        <li>Once SW is installed: fill the cache
            <ul>
                <li><code>install</code> event handler</li>
            </ul>
        </li>
        <li>Optionally we can also add other things to the cache later</li>
    </ul>
    <pre><code>{% filter prexample %}
        const fillCache = async () => {
            const cache = await caches.open(cache_version);
            await cache.addAll(['./', 'index.html', 'somepage.html', 'somecode.js', 'somestyle.css', 'somepicture.avif']);
        }
    {% endfilter %}</code></pre>
</section>
<section>
    <h3>Cache Management</h3>
    <ul>
        <li>Cache is separated into multiple versions</li>
        <li>Make sure to remove the old versions!</li>
    </ul>
    <pre><code>{% filter prexample %}
        const cacheKeys = await caches.keys();
        for (const cacheKey of cacheKeys) {
            if (cacheKey !== cache_version) {
                await caches.delete(cacheKey);
            }
        }
    {% endfilter %}</code></pre>
</section>
<section>
    <h3>Resources and References</h3>
    <ul>
        <li><a href="https://business.adobe.com/blog/basics/progressive-web-app-examples"></a>Adobe Blog Progressive web apps</li>
        <li><a href="https://medium.com/one-more-thing-studio/native-react-native-or-pwa-what-should-i-choose-e63f18732b5e"></a>Native, React-native or PWA</li>
        <li><a href="https://youtu.be/1WWweyBaWZk?si=Wfdd0nMgZ9L6NRso"></a>What Is A Progressive Web App Youtube</li>
        <li><a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps"></a>mdn Progressive web apps</li>
        <li><a href="https://developer.chrome.com/docs/workbox/service-worker-overview"></a>Service worker overview</li>

    </ul>
</section>




{% endblock %}
